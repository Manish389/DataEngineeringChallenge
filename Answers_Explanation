1> 	a> At first I have constructed a case class "fifaData" with all the columns and its datatypes.
	b> After this i am reading the file from InputData folder and cleansing the data
	c> Cleansning of records includes
		i> handling null values for integer --> df.na.Fill(0, Seq("Integer Columns"))
		ii> handling null values for String --> df.na.Fill("NA", Seq("String Columns"))
	d> After this i have converted dataframe to case class by using  --> .as[fifaData]

	e> After this  the dailyDelta file is being appended with timestamp and is stored in output folder

Ans: 2a:
		step 1: At first i am filtering the Records with following filters
					a> Preferred Foot = "Left"
					b> Age < 30
					c> Position = ("RWM", "RM", "RCM", "CM", "CAM", "CDM", "LCM", "LM", "LWM")
		Step 2: Now i have used windowing function to fetch the count of Names by partitoning the data ClubWise
		Step 3: Now i have used dense_rank() from this we will get all the left midfielder counts
		step 4: filter the record where rank = 1 to get the club which has the most number of left footed midfielders under 30 years of age.

Ans 2b: The strongest National team by overall rating for a 4-4-2 formation

		step 1: At first i am selecting the following Records
					a> Nationality
					b> Overall rating
					c> Position
		Step 2: Now calculating the average of overall rating after partitioning the data NationalityWise
		Step 3: Now i have use collect_set to get the distinct records after partitioning the data NationalityWise
		Step 4: Now i am filtering the Records with following filters which formates 4-4-2 formations=>
								   GK
							RB,CB/RCB,CB/LCB,LB
						RM/RWM,LCM/CM,RCM/CM,LM/LWM
							  RF/CF/LF,ST

					Here, i have used following filter conditions:
						.filter(array_contains(col("All_positions"), "GK") &&
						array_contains(col("All_positions"), "RB") &&
						(array_contains(col("All_positions"), "CB") || array_contains(col("All_positions"), "RCB")) &&
						(array_contains(col("All_positions"), "CB") || array_contains(col("All_positions"), "LCB ")) &&
						array_contains(col("All_positions"), "LB") &&
						(array_contains(col("All_positions"), "RM") || array_contains(col("All_positions"), "RWM ")) &&
						(array_contains(col("All_positions"), "LCM") || array_contains(col("All_positions"), "CM ")) &&
						(array_contains(col("All_positions"), "RCM") || array_contains(col("All_positions"), "CM ")) &&
						(array_contains(col("All_positions"), "LM") || array_contains(col("All_positions"), "LWM ")) &&
						(array_contains(col("All_positions"), "RF") || array_contains(col("All_positions"), "CF ") || array_contains(col("All_positions"), "LF ")) && array_contains(col("All_positions"), "ST")

		Step 5: Now to get the  strongest National team by overall rating for a 4-4-2 formation i have used windowing function
				and filtering the record with rank=1


Ans 2b: The strongest Club by overall rating for a 4-4-2 formation

		step 1: At first i am selecting the following Records
					a> Club
					b> Overall rating
					c> Position
		Step 2: Now calculating the average of overall rating after partitioning the data ClubWise
		Step 3: Now i have use collect_set to get the distinct records after partitioning the data ClubWise
		Step 4: Now i am filtering the Records with following filters which formates 4-4-2 formations=>
								   GK
							RB,CB/RCB,CB/LCB,LB
						RM/RWM,LCM/CM,RCM/CM,LM/LWM
							  RF/CF/LF,ST

					Here, i have used following filter conditions:
						.filter(array_contains(col("All_positions"), "GK") &&
						array_contains(col("All_positions"), "RB") &&
						(array_contains(col("All_positions"), "CB") || array_contains(col("All_positions"), "RCB")) &&
						(array_contains(col("All_positions"), "CB") || array_contains(col("All_positions"), "LCB ")) &&
						array_contains(col("All_positions"), "LB") &&
						(array_contains(col("All_positions"), "RM") || array_contains(col("All_positions"), "RWM ")) &&
						(array_contains(col("All_positions"), "LCM") || array_contains(col("All_positions"), "CM ")) &&
						(array_contains(col("All_positions"), "RCM") || array_contains(col("All_positions"), "CM ")) &&
						(array_contains(col("All_positions"), "LM") || array_contains(col("All_positions"), "LWM ")) &&
						(array_contains(col("All_positions"), "RF") || array_contains(col("All_positions"), "CF ") || array_contains(col("All_positions"), "LF ")) && array_contains(col("All_positions"), "ST")

		Step 5: Now to get the  strongest Club by overall rating for a 4-4-2 formation i have used windowing function
				and filtering the record with rank=1



Ans 2c: Which team has the most expensive squad value in the world? Does that team also have the largest wage bill ?

		At first calculating the expensive squad value in the world
			step 1: At first i have selected Nationality and value records from  dailyFiltered Data
			Step 2: As the value columns has special characters ('M','€', K ), i have used regexp_replace to replace all the special characters with "".
			Step 3: Now i have casted the value column in to decimal format
			Step 4: After this i am grouping the data "NationalityWise and getting the aggregate sum of the value .
			Step 5: After this to get the  team has the most expensive squad value in the world i have used windowing function
					and filtering the record with rank=1

	Now, calculating the team which has the largest wage bill
			step 1: At first i have selected Nationality and Wage records from dailyFiltered Data
			Step 2: As the value columns has special characters ('M','€', K ), i have used regexp_replace to replace all the special characters with "".
			Step 3: Now i have casted the value column in to decimal format
			Step 4: After this i am grouping the data "NationalityWise and getting the aggregate sum of the Wages .
			Step 5: After this to get the  team has largest wage bill i have used windowing function
					and filtering the record with rank=1

	Now, Does to check that the team with expensive squad value is also having the largest wage bill following step is used.
			step 1: calculate ExpensiveNationByValue --> val ExpensiveNationByValue = MostExpensiveNationValue.select("Nationality").first().getString(0)
			Step 2: calculate ExpensiveNationBywages --> val ExpensiveNationBywages = MostExpensiveNationWages.select("Nationality").first().getString(0)

			step 3:  if(ExpensiveNationByValue == ExpensiveNationBywages)
						println("Yes," + ExpensiveNationByValue + " has the Most expensive squad value in World and also with Highest Wage!")
					else
						println("The Most expensive squad value in World and also with Highest Wage are not Same !")


Ans 2d: Which position pays the highest wage in average?
			step 1: At first i have selected Position and Wage records from dailyFiltered Data
			Step 2: As the wage columns has special characters ('M','€', K ), i have used regexp_replace to replace all the special characters with "".
			Step 3: Now i have casted the wage column in to decimal format
			Step 4: After this i am partitioning the data "PositionWise and getting the average of the Wages .
			Step 5: After this to get the team  with highest wage in average i have used windowing function
					and filtering the record with rank=1



Ans 2e:	What makes a goalkeeper great? Share 4 attributes which are most relevant to becoming a good goalkeeper?

		step 1: At first i am filtering the Records with following filters
					a> Position = "GK"

		Step 2: After this i am calculating the aggregate of average of all the attributes for the records with position ="GK".
Here i will get the result of attributes in a different columns and with single row
		Step 3: Now i will go for unpivoting technique and convert all the attributes in multiple columns into different rows.
		step 4: Now i will filter the record  where($"great_Goalkeeper_AttributeWise_Rank" < 5) to get the 4 attributes which are most relevant to becoming a good goalkeeper.


Ans 2f:	What makes a good Striker (ST)? Share 5 attributes which are most relevant to becoming a top striker ?

		step 1: At first i am filtering the Records with following filters
					a> Position = "ST"
		Step 2: After this i am calculating the aggregate of average of all the attributes for the records with position ="ST".
Here i will get the result of attributes in a different columns and with single row
		Step 3: Now i will go for unpivoting technique and convert all the attributes in multiple columns into different rows.
		step 4: Now i will filter the record  where($"great_Striker_Attributes_Rank" < 6) to get the 5 attributes which are most relevant to becoming a top striker.



Ans 3. 	In addition to your solution in (1), also store the dataset in Postgres Database using a docker (postgres:11.5) where one can query for. Overall Rating (int), Position, Country, Name, Club Name, Wage(as decimal), Value (as decimal), Joined (date), Age (int)

		Step 1: select all the following data
				a> Overall Rating
				b> Position
				c> Country
				d> Name
				e> Club Name
				f> Wage
				g> Value
				h> Joined
				i> Age

		Step 2: Create a dataframe which contains followings
				a> Overall Rating --> Cast it into integer
				b> Position
				c> Country
				d> Name
				e> Club Name
				f> Wage --> Cast it into decimal
				g> Value --> Cast it into decimal
				h> Joined --> Cast it into date
				i> Age --> Cast it into integer

		Step 3: connect with postgres and write the dataframe into postgres
				 df.write.format\
					.format("jdbc") \
					.option("url", "jdbc:postgresql://localhost:5432/yourDBname") \
					.option("driver", "org.postgresql.Driver") \
					.option("dbtable", "yourtablename") \
					.option("user", "postgres") \
					.option("password", "***") \
					.mode("overwrite")
					.Save()

	//#Saving Dataframe in Postgre with relevent attribute
    val Postgre_file= df.write.format
					  .format("jdbc") \
					  .option("url", "jdbc:postgresql://localhost:5432/yourDBname") \
					  .option("driver", "org.postgresql.Driver") \
					  .option("dbtable", "yourtablename") \
					  .option("user", "postgres") \
					  .option("password", "***") \
					  .select($"Overall".cast("Integer").alias("Overall_Rating"),
							  $"Position",
							  $"Nationality".alias("Country"),
							  $"Name",
							  $"Club".alias("Club Name"),
							  $"Wage".cast("Decimal(20,5)"),
							  $"Value".cast("Decimal(20,2)"),
							  $"joined".cast("Date"),
							  $"Age".cast("Integer"))


	Postgre_file.printSchema()
					//Write data into Postgre:-
				   // Postgre_file.write.mode(PropertiesLoader.mode).jdbc(PropertiesLoader.url_connect,PropertiesLoader.dbtable,prop)













